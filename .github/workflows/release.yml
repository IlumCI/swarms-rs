name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi

    - name: Check if version matches Cargo.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CARGO_VERSION="v$(grep '^version = ' swarms-rs/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')"
        if [[ "$VERSION" != "$CARGO_VERSION" ]]; then
          echo "Version mismatch: tag=$VERSION, Cargo.toml=$CARGO_VERSION"
          exit 1
        fi

    - name: Run tests
      run: cargo test --workspace --all-features

  build-release:
    name: Build Release
    needs: validate-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: |
        cd swarms-rs
        cargo build --release --target ${{ matrix.target }} --all-features

    - name: Create release archive
      shell: bash
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        ARCHIVE_NAME="swarms-rs-$VERSION-${{ matrix.target }}"
        
        mkdir -p dist
        
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/swarms-rs.exe dist/
          cd dist
          7z a "../$ARCHIVE_NAME.zip" *
        else
          cp target/${{ matrix.target }}/release/swarms-rs dist/ 2>/dev/null || echo "No binary found, skipping"
          cd dist
          tar -czf "../$ARCHIVE_NAME.tar.gz" *
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.target }}
        path: |
          *.tar.gz
          *.zip
        retention-days: 1

  publish-crates:
    name: Publish to crates.io
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Verify package can be published
      run: |
        cd swarms-macro
        cargo publish --dry-run
        cd ../swarms-rs
        cargo publish --dry-run

    - name: Publish swarms-macro to crates.io
      run: |
        cd swarms-macro
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true

    - name: Wait for swarms-macro to be available
      run: sleep 30

    - name: Publish swarms-rs to crates.io
      run: |
        cd swarms-rs
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*
        merge-multiple: true

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $VERSION^ 2>/dev/null || echo "")
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "This is the first release of swarms-rs." >> CHANGELOG.md
        fi
        
        echo "## Features" >> CHANGELOG.md
        echo "- Enterprise-grade multi-agent orchestration framework" >> CHANGELOG.md
        echo "- Async/await support with Tokio" >> CHANGELOG.md
        echo "- Multiple LLM provider integrations" >> CHANGELOG.md
        echo "- Graph-based workflow execution" >> CHANGELOG.md
        echo "- Comprehensive benchmarking suite" >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          *.tar.gz
          *.zip
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    name: Build and Push Docker Images
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          swarmsrs/swarms-rs
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
